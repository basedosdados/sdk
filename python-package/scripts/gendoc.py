"""
Script to generate Markdown API documentation for selected Python packages.

This script uses pydoc-markdown and docspec to load, process, and render
documentation for specified modules and packages. It removes private classes,
functions, and methods from the output, formats docstrings as Markdown, and
writes the result to a file.

Usage:
    uv run scripts/gendoc.py --save-path <output_directory>
"""

import sys
from pathlib import Path
from typing import Optional

import docspec
import docstring_to_markdown
from pydoc_markdown.contrib.loaders.python import PythonLoader
from pydoc_markdown.contrib.renderers.markdown import MarkdownRenderer
from pydoc_markdown.interfaces import Context


def name_is_public(name: str) -> bool:
    """
    Determine if a name is considered public (not private or special).

    Args:
        name: The name to check.

    Returns:
        True if the name is public, False otherwise.
    """
    return name[0] != "_" and name[1] != "_"


def remove_private_method(class_: docspec.Class) -> docspec.Class:
    """
    Remove private methods from a class, keeping only public methods and __init__.

    Args:
        class_: The class to process.

    Returns:
        The class with private methods removed.
    """
    class_.members = [
        i
        for i in class_.members
        if i.name == "__init__" or name_is_public(i.name)
    ]
    return class_


def fmt_docstrings(
    docstring: Optional[docspec.Docstring],
) -> Optional[docspec.Docstring]:
    """
    Convert a docstring to Markdown and clean up header formatting.

    Args:
        docstring: The docstring to format.

    Returns:
        The formatted docstring.
    """
    if docstring is None:
        return None

    markdown = docstring_to_markdown.convert(docstring.content)

    new_content = "\n".join(
        [line.replace("#### ", "") for line in markdown.split("\n")]
    )

    docstring.content = new_content

    return docstring


def remove_private_function_class(module: docspec.Module) -> docspec.Module:
    """
    Remove private classes and functions from a module, and format docstrings.

    Args:
        module: The module to process.

    Returns:
        The processed module.
    """
    new_members: list[docspec._ModuleMemberType] = []

    for member in module.members:
        if isinstance(
            member, (docspec.Class, docspec.Function)
        ) and name_is_public(member.name):
            if isinstance(member, docspec.Class):
                class_ = remove_private_method(member)
                class_.docstring = fmt_docstrings(class_.docstring)

                class_methods = []
                for method in class_.members:
                    method.docstring = fmt_docstrings(method.docstring)
                    class_methods.append(method)

                class_.members = class_methods
                new_members.append(class_)

            if isinstance(member, docspec.Function) and name_is_public(
                member.name
            ):
                member.docstring = fmt_docstrings(member.docstring)

                new_members.append(member)

    module.members = new_members

    return module


def generate(save_dir: Path):
    """
    Generate Markdown API documentation and save it to the specified directory.

    Args:
        save_dir: The directory where the documentation will be saved.
    """
    context = Context(directory=".")
    loader = PythonLoader(
        search_path=["basedosdados"],
        packages=[
            "download.download",
            "download.metadata",
            "upload.dataset",
            "upload.table",
            "upload.storage",
        ],
    )
    renderer = MarkdownRenderer(
        render_module_header=False,
        # Remove anchor <a>
        insert_header_anchors=False,
        header_level_by_type={
            "Module": 2,
            "Class": 2,
            "Method": 3,
            "Function": 2,
            "Variable": 4,
        },
    )

    loader.init(context)
    renderer.init(context)

    modules = list(loader.load())

    pub_modules = [remove_private_function_class(m) for m in modules]

    content = renderer.render_to_string(pub_modules)

    header = """---
title: Python
category: APIs
order: 0
---

{/* Automatically generated by a Python script, do not edit by hand!! */}

# Python
"""

    (save_dir / "api_reference_python.md").write_text(
        "\n".join([header, content]), encoding="utf-8"
    )


if __name__ == "__main__":
    save_path = "--save-path" in sys.argv
    if not save_path:
        raise Exception("Missing --save-path argument")

    dir = Path(sys.argv[-1])

    if not dir.is_dir():
        raise Exception("--save-path must be a directory")

    generate(dir)
